/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "BaseModel.h"

namespace stratis 
{
namespace api 
{

/*
 * LocalCallContractRequest
 *
 * A class containing the necessary parameters to perform a local smart contract method call request.
 */
class STRATISAPI_API LocalCallContractRequest : public Model
{
public:
    virtual ~LocalCallContractRequest() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	/* The height at which to query the contract's state. If unset, will default to the current chain tip. */
	TOptional<int64> BlockHeight;
	/* The address of the smart contract containing the method. */
	FString ContractAddress;
	/* The name of the method to call. */
	FString MethodName;
	/* The amount of STRAT (or sidechain coin) to send to the smart contract address.   No funds are actually sent, but the Amount field allows  certain scenarios, where the funds sent dictates the result, to be checked. */
	TOptional<FString> Amount;
	/* The gas price to use. This is used to calculate the expected expenditure  if the method is run by a miner mining a call transaction rather than  locally. */
	TOptional<int64> GasPrice;
	/* The maximum amount of gas that can be spent executing this transaction.  Although the gas expenditure is theoretical rather than actual,  this limit cannot be exceeded even when the method is run locally. */
	TOptional<int64> GasLimit;
	/* A wallet address containing the funds to cover transaction fees, gas, and any funds specified in the  Amount field.  Note that because the method call is local no funds are spent. However, the concept of the sender address  is still valid and may need to be checked.  For example, some methods, such as a withdrawal method on an escrow smart contract, should only be executed  by the deployer, and in this case, it is the Sender address that identifies the deployer. */
	TOptional<FString> Sender;
	/* An array of encoded strings containing the parameters (and their type) to pass to the smart contract  method when it is called. More information on the  format of a parameter string is available  <a target=\"_blank\" href=\"https://academy.stratisplatform.com/SmartContracts/working-with-contracts.html#parameter-serialization\">here</a>. */
	TOptional<TArray<FString>> Parameters;
};

}
}
